//? Документация
// https://metanit.com/web/nodejs/2.3.php
// https://nodejs.org/api/globals.html



//!================================================================================================================================================
//? NodeJs

//? Работает в любом окружении, где есть node(npm). Для запуска необходимо проинициилизировать проект командой npm init
//? Если проект скачали с хранилища, нужно его проинициализировать npm install или npm i


//? При отправке данных с клиента на сервер, все данные отправляются маленькими данными для оптимизации, они разбиваются на buffer'ы, чанки(chunks)















//!================================================================================================================================================
//? /Modules/Модули/

//? Модули в js являются самовызвающейся функцией, которая принимает импортируемые файлы и экспортирует сущности
//? При импортировании, модуль отработает только один раз, при повторных импортах заново функциона модуля не будет вызван


//? CommonJs/EsModules
//? Модули для браузера работают только с import, require не будет работать, это только возможность ноды, но если мы используем бандлеры типа вебпака, то он сам под капотом будет пересобирать наш проект и заменять require на import везде по коду
//? В модули commonjs можно в module.exports присваивать абсолютно любые сущности
//? Также в commonjs можно использовать функцию import динамическую, это возможно делать не только в браузере

//? Они отличаются следующим:
//? 1) require можно делать в любом месте файла, даже в условиях/import только на верхнем уровне
//? 2) require загружает весь модуль целиком, даже если нужны определенные сущности/выборочная загрузка, весь модуль не тянется
//? 3) require не имеет асинхронности/import можно делать асинхронно, динамический импорт
//? 4) require импортируемые сущности являются константами, напрямую их изменять нельзя. Выдается ошибка


//? Чтобы в node использовать es модули:
//? 1) .mjs расширение можно использовать
//? 2) в package.json указать type: module




















//?================================================================================================================================================
//? Nodemon
// https://www.npmjs.com/package/nodemon

//? Пакет для перезапуска приложения при обнаружении изменений
//? npm install --save-dev nodemon


//? для запуска в package.json нужно добавить скрипт, который будет запускать приложение, например "dev": "nodemon scripts/script.js"










//!================================================================================================================================================
//? /Express/
//? npm i express

// npm install @types/express














//!================================================================================================================================================
//? /Глобальные обьекты/модули/modules/
// https://medium.com/web-standards/es-modules-cartoon-dive-71f42c1e851a
// https://nodejs.org/api/globals.html      глобальные доступные переменные в global

//? global - глобальный обьект, аналогия window в бразуерном js


//? __dirname - путь до папки проекта
//? __filename - путь до запущенного скрипта


//? Модули в nodejs используют формат commonjs(module.exports, require)
//? module.exports - для того, чтобы экспортировать функционал из файла
//? require - глобальная функция, которая позволяет получать экспортированный функционал


//? Чтобы использовать какую то функциональность в node, например работу с файловой системой, events, путями файлов, нужно импортировать данный функционал из соответствующих модулей




//?================================================================================================================================================
//? path
// https://nodejs.org/api/path.html

//? Модуль path предоставляет утилиты для работы с путями к файлам и каталогам. Для работы с ним нужно его импортировать.


//? Работа модуля в разных операционных системах может отличаться, например path.basename может привести к разным результатам в windows и posix






//!================================================================================================================================================
//? Events
//? Библиотека ноды предоставляющая eventEmitter и вообще сущности для работы с ивентами
//? с помощью нее можно подписываться, отправлять события, и т.д.



//? EventEmitter
//? Класс, отвечающий за обработку событий, в браузере аналогия - EventTarget

//? on, addListener, off, removeListener, removeAllListeners, once, prependListener, prependListenerOnce
//? методы добавления - удаления ивентов
//?     removeAllListeners может принимать ивент, который нужно удалить
//?     once - один раз прослушать и удалить подписку
//?     prependListenerOnce/prependListener - в начало добавить обработчк, потому что они вызываются в порядке добавления

//?     listenerCount - сколько зарегестрировано обработчиков на данный ивент


//? Чтобы отловить ошибку, нужно подписаться на событие error, связанное с этим ивент эмиттером
